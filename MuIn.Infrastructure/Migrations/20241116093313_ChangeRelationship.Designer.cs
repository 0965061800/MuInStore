// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuIn.Infrastructure;

#nullable disable

namespace MuIn.Infrastructure.Migrations
{
    [DbContext(typeof(MuInDbContext))]
    [Migration("20241116093313_ChangeRelationship")]
    partial class ChangeRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "362c8d9e-74fd-41b2-be21-ed9f680fb4d7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0bb0f4c7-0750-4e97-9d2a-bca06c1f34a5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Alias = "logitech",
                            BrandImage = "images/brands/logitech.jpg",
                            BrandName = "Logitech"
                        },
                        new
                        {
                            BrandId = 2,
                            Alias = "razer",
                            BrandImage = "images/brands/razer.jpg",
                            BrandName = "Razer"
                        },
                        new
                        {
                            BrandId = 3,
                            Alias = "apple",
                            BrandImage = "images/brands/apple.jpg",
                            BrandName = "Apple"
                        },
                        new
                        {
                            BrandId = 4,
                            Alias = "samsung",
                            BrandImage = "images/brands/samsung.jpg",
                            BrandName = "Samsung"
                        },
                        new
                        {
                            BrandId = 5,
                            Alias = "sony",
                            BrandImage = "images/brands/sony.jpg",
                            BrandName = "Sony"
                        });
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCatId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("ParentCatId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CatId = 1,
                            Alias = "computer-accessories",
                            CatImage = "images/categories/computer-accessories.jpg",
                            CatName = "Computer Accessories",
                            Description = "Everything you need for your computer setup.",
                            ImageName = "computer-accessories.jpg"
                        },
                        new
                        {
                            CatId = 2,
                            Alias = "keyboards",
                            CatImage = "images/categories/keyboards.jpg",
                            CatName = "Keyboards",
                            Description = "A variety of keyboards for every need.",
                            ImageName = "keyboards.jpg",
                            ParentCatId = 1
                        },
                        new
                        {
                            CatId = 3,
                            Alias = "mice-and-pointing-devices",
                            CatImage = "images/categories/mice.jpg",
                            CatName = "Mice & Pointing Devices",
                            Description = "Mice, trackpads, and other pointing devices.",
                            ImageName = "mice.jpg",
                            ParentCatId = 1
                        },
                        new
                        {
                            CatId = 4,
                            Alias = "smartphones",
                            CatImage = "images/categories/smartphones.jpg",
                            CatName = "Smartphones",
                            Description = "Latest smartphones from top brands.",
                            ImageName = "smartphones.jpg"
                        },
                        new
                        {
                            CatId = 5,
                            Alias = "laptops",
                            CatImage = "images/categories/laptops.jpg",
                            CatName = "Laptops",
                            Description = "Laptops for work, gaming, and casual use.",
                            ImageName = "laptops.jpg"
                        },
                        new
                        {
                            CatId = 6,
                            Alias = "headphones",
                            CatImage = "images/categories/headphones.jpg",
                            CatName = "Headphones",
                            Description = "Wired and wireless headphones for all needs.",
                            ImageName = "headphones.jpg"
                        },
                        new
                        {
                            CatId = 7,
                            Alias = "tablets",
                            CatImage = "images/categories/tablets.jpg",
                            CatName = "Tablets",
                            Description = "Tablets for personal and professional use.",
                            ImageName = "tablets.jpg"
                        });
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "Black"
                        });
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSkuId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BestSeller")
                        .HasColumnType("bit");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sale")
                        .HasColumnType("decimal(2,2)");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Active = true,
                            Alias = "logitech-wireless-mouse",
                            BestSeller = true,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9359),
                            ImageName = "mouse.jpg",
                            ProductCode = "WM123",
                            ProductImage = "images/products/mouse.jpg",
                            ProductName = "Logitech Wireless Mouse",
                            ProductPrice = 25.99m,
                            Sale = 0.15m
                        },
                        new
                        {
                            ProductId = 2,
                            Active = true,
                            Alias = "razer-gaming-keyboard",
                            BestSeller = true,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9366),
                            ImageName = "keyboard.jpg",
                            ProductCode = "RK123",
                            ProductImage = "images/products/keyboard.jpg",
                            ProductName = "Razer Mechanical Gaming Keyboard",
                            ProductPrice = 99.99m,
                            Sale = 0.10m
                        },
                        new
                        {
                            ProductId = 3,
                            Active = true,
                            Alias = "apple-magic-mouse",
                            BestSeller = false,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9370),
                            ImageName = "apple-magic-mouse.jpg",
                            ProductCode = "AMM100",
                            ProductImage = "images/products/apple-magic-mouse.jpg",
                            ProductName = "Apple Magic Mouse",
                            ProductPrice = 79.99m,
                            Sale = 0.05m
                        },
                        new
                        {
                            ProductId = 4,
                            Active = true,
                            Alias = "samsung-galaxy-s21",
                            BestSeller = true,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9373),
                            ImageName = "galaxy-s21.jpg",
                            ProductCode = "SGS21",
                            ProductImage = "images/products/galaxy-s21.jpg",
                            ProductName = "Samsung Galaxy S21",
                            ProductPrice = 799.99m,
                            Sale = 0.10m
                        },
                        new
                        {
                            ProductId = 5,
                            Active = true,
                            Alias = "apple-macbook-air-m1",
                            BestSeller = true,
                            BrandId = 3,
                            CategoryId = 5,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9377),
                            ImageName = "macbook-air.jpg",
                            ProductCode = "MBA-M1",
                            ProductImage = "images/products/macbook-air.jpg",
                            ProductName = "Apple MacBook Air M1",
                            ProductPrice = 999.99m,
                            Sale = 0.15m
                        },
                        new
                        {
                            ProductId = 6,
                            Active = true,
                            Alias = "sony-wh1000xm4-headphones",
                            BestSeller = true,
                            BrandId = 5,
                            CategoryId = 6,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9380),
                            ImageName = "sony-headphones.jpg",
                            ProductCode = "WH1000XM4",
                            ProductImage = "images/products/sony-headphones.jpg",
                            ProductName = "Sony WH-1000XM4 Wireless Headphones",
                            ProductPrice = 349.99m,
                            Sale = 0.10m
                        },
                        new
                        {
                            ProductId = 7,
                            Active = true,
                            Alias = "apple-ipad-air-2022",
                            BestSeller = false,
                            BrandId = 3,
                            CategoryId = 7,
                            CreatAt = new DateTime(2024, 11, 16, 16, 33, 12, 243, DateTimeKind.Local).AddTicks(9382),
                            ImageName = "ipad-air-2022.jpg",
                            ProductCode = "IPA2022",
                            ProductImage = "images/products/ipad-air-2022.jpg",
                            ProductName = "Apple iPad Air 2022",
                            ProductPrice = 599.99m,
                            Sale = 0.05m
                        });
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.ProductSku", b =>
                {
                    b.Property<int>("ProductSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSkuId"));

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("skuImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSkuId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSku");

                    b.HasData(
                        new
                        {
                            ProductSkuId = 1,
                            ColorId = 1,
                            ImageName = "mouse-red.jpg",
                            ProductId = 1,
                            Sku = "WM123-RED",
                            UnitInStock = 100,
                            UnitPrice = 25.99m,
                            skuImage = "images/sku/mouse-red.jpg"
                        },
                        new
                        {
                            ProductSkuId = 2,
                            ColorId = 2,
                            ImageName = "keyboard-black.jpg",
                            ProductId = 2,
                            Sku = "BK456-BLK",
                            UnitInStock = 50,
                            UnitPrice = 45.99m,
                            skuImage = "images/sku/keyboard-black.jpg"
                        });
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.UserAggregate.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.UserAggregate.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Category", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuIn.Domain.Aggregates.OrderAggregate.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.OrderDetail", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.OrderAggregate.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuIn.Domain.Aggregates.ProductAggregate.ProductSku", "ProductSku")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductSkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSku");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MuIn.Domain.Aggregates.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.ProductSku", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("MuIn.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("ProductSkus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.UserAggregate.Comment", b =>
                {
                    b.HasOne("MuIn.Domain.Aggregates.UserAggregate.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuIn.Domain.Aggregates.ProductAggregate.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductSkus");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.ProductAggregate.ProductSku", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MuIn.Domain.Aggregates.UserAggregate.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
