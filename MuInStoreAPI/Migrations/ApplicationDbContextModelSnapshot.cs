// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuInStoreAPI.Data;

#nullable disable

namespace MuInStoreAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c16c96c6-00ed-4139-bbfb-2c1b187be118",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4d18a50d-0524-466a-89c7-6f429b4ae1ac",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MuInStoreAPI.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Alias = "casio",
                            BrandImage = "",
                            BrandName = "Casio"
                        },
                        new
                        {
                            BrandId = 2,
                            Alias = "yamaha",
                            BrandImage = "",
                            BrandName = "Yamaha"
                        },
                        new
                        {
                            BrandId = 3,
                            Alias = "roland",
                            BrandImage = "",
                            BrandName = "Roland"
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCatId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("ParentCatId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CatId = 1,
                            Alias = "piano",
                            CatName = "Piano"
                        },
                        new
                        {
                            CatId = 2,
                            Alias = "guitar",
                            CatName = "Guitar"
                        },
                        new
                        {
                            CatId = 3,
                            Alias = "Violin",
                            CatName = "Violin"
                        },
                        new
                        {
                            CatId = 4,
                            Alias = "e-piano",
                            CatName = "Piano điện",
                            ParentCatId = 1
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Black"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "White"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorName = "Brown"
                        },
                        new
                        {
                            ColorId = 4,
                            ColorName = "Grey"
                        },
                        new
                        {
                            ColorId = 5,
                            ColorName = "Blue"
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.CommentImage", b =>
                {
                    b.Property<int>("CommentImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentImageId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageId");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentImages");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureId = 1,
                            Alias = "newbigginer",
                            FeatureName = "Dành cho người mới học"
                        },
                        new
                        {
                            FeatureId = 2,
                            Alias = "kids",
                            FeatureName = "Dành cho người bạn nhỏ"
                        },
                        new
                        {
                            FeatureId = 3,
                            Alias = "advanced",
                            FeatureName = "Danh cho trình độ cao"
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Alias = "HCM",
                            Lat = "10.7936663",
                            Level = 0,
                            Lng = "106.6777955",
                            LocationName = "Tp Hồ Chí Minh"
                        },
                        new
                        {
                            LocationId = 839,
                            Alias = "binh-duong",
                            Lat = "11.3254024",
                            Level = 0,
                            Lng = "106.477016999999",
                            LocationName = "Bình Dương"
                        },
                        new
                        {
                            LocationId = 1093,
                            Alias = "binh-chanh",
                            Lat = "10.7430983",
                            Level = 0,
                            Lng = "106.54662209999992",
                            LocationName = "Huyện Bình Chánh",
                            ParentLocationId = 1
                        },
                        new
                        {
                            LocationId = 1136,
                            Alias = "cu-chi",
                            Lat = "11.0066683",
                            Level = 0,
                            Lng = "106.51319669999998",
                            LocationName = "Huyện Củ Chi",
                            ParentLocationId = 1
                        },
                        new
                        {
                            LocationId = 1103,
                            Alias = "tp-thu-dau-mot",
                            Lat = "10.9929842",
                            Level = 0,
                            Lng = "106.65570730000002",
                            LocationName = "Thành Phố Thủ Dầu Một",
                            ParentLocationId = 2
                        },
                        new
                        {
                            LocationId = 1100,
                            Alias = "thi-xa-ben-cat",
                            Lat = "11.101302",
                            Level = 0,
                            Lng = "106.58197889999997",
                            LocationName = "Thị Xã Bến Cát",
                            ParentLocationId = 2
                        },
                        new
                        {
                            LocationId = 1141,
                            Alias = "xa-binh-hung",
                            Lat = "10.7200104",
                            Level = 0,
                            Lng = "106.6703963",
                            LocationName = "Xã Bình Hưng",
                            ParentLocationId = 1093
                        },
                        new
                        {
                            LocationId = 1142,
                            Alias = "xa-binh-loi",
                            Lat = "10.7756348",
                            Level = 0,
                            Lng = "106.5096239",
                            LocationName = "Xã Bình Lợi",
                            ParentLocationId = 1093
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("SumTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleRate")
                        .HasColumnType("decimal(2,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSkuId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.PayStatus", b =>
                {
                    b.Property<int>("PayStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayStatusId");

                    b.ToTable("PayStatuses");

                    b.HasData(
                        new
                        {
                            PayStatusId = 1,
                            Description = "Đang chờ thanh toán",
                            Status = "Pending"
                        },
                        new
                        {
                            PayStatusId = 2,
                            Description = "Bị từ chối",
                            Status = "Declined"
                        },
                        new
                        {
                            PayStatusId = 3,
                            Description = "Hủy bỏ",
                            Status = "Cancelled"
                        },
                        new
                        {
                            PayStatusId = 4,
                            Description = "Hoàn trả",
                            Status = "Refunded"
                        },
                        new
                        {
                            PayStatusId = 5,
                            Description = "Hết hạn",
                            Status = "Expired"
                        },
                        new
                        {
                            PayStatusId = 6,
                            Description = "Đã thanh toán",
                            Status = "Settled"
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("PayStatusId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BestSeller")
                        .HasColumnType("bit");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sale")
                        .HasColumnType("decimal(2,2)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specifications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FeatureId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Active = true,
                            Alias = "yamahaC1Pe",
                            BestSeller = false,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatAt = new DateTime(2024, 5, 15, 12, 43, 50, 541, DateTimeKind.Local).AddTicks(6455),
                            Description = "Thông số kỹ thuật YAMAHA C1PE. Model C1 PE Màu sắc/Lớp hoàn thiện Thùng đàn Màu sắc Polished Ebony Lớp phủ Polished Kích cỡ/Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\") Trọng lượng Trọng lượng...",
                            FeatureId = 3,
                            ProductCode = "C1PE-C",
                            ProductName = "Grand Piano Yamaha C1 PE - C Series",
                            ProductPrice = 12000000m,
                            Sale = 0m,
                            VideoLink = "",
                            specifications = "Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\")"
                        },
                        new
                        {
                            ProductId = 2,
                            Active = true,
                            Alias = "CT300",
                            BestSeller = false,
                            BrandId = 1,
                            CategoryId = 4,
                            CreatAt = new DateTime(2024, 5, 15, 12, 43, 50, 541, DateTimeKind.Local).AddTicks(6473),
                            Description = "Thông số kỹ thuật YAMAHA C1PE. Model C1 PE Màu sắc/Lớp hoàn thiện Thùng đàn Màu sắc Polished Ebony Lớp phủ Polished Kích cỡ/Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\") Trọng lượng Trọng lượng...",
                            FeatureId = 1,
                            ProductCode = "CT300",
                            ProductName = "CASIO CT-S300",
                            ProductPrice = 18000000m,
                            Sale = 0.3m,
                            VideoLink = "",
                            specifications = "Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\")"
                        },
                        new
                        {
                            ProductId = 3,
                            Active = true,
                            Alias = "CT300",
                            BestSeller = false,
                            BrandId = 1,
                            CategoryId = 4,
                            CreatAt = new DateTime(2024, 5, 15, 12, 43, 50, 541, DateTimeKind.Local).AddTicks(6478),
                            Description = "Thông số kỹ thuật YAMAHA C1PE. Model C1 PE Màu sắc/Lớp hoàn thiện Thùng đàn Màu sắc Polished Ebony Lớp phủ Polished Kích cỡ/Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\") Trọng lượng Trọng lượng...",
                            FeatureId = 2,
                            ProductCode = "CDP-S160BK",
                            ProductName = "CASIO CDP-S160BK",
                            ProductPrice = 8200000m,
                            Sale = 0.3m,
                            VideoLink = "",
                            specifications = "Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\")"
                        },
                        new
                        {
                            ProductId = 4,
                            Active = true,
                            Alias = "digital-piano-rp501r",
                            BestSeller = true,
                            BrandId = 3,
                            CategoryId = 4,
                            CreatAt = new DateTime(2024, 5, 15, 12, 43, 50, 541, DateTimeKind.Local).AddTicks(6481),
                            Description = "- Sản phẩm bao gồm: Đàn + Ghế Roland RAM8065 | - Động cơ SuperNATURAL Piano cho âm thanh phong phú & chân thực | - Bàn phím PHA-4 Standard có tính năng cảm biến với độ phân giải cao | - Pedal Progressive Damper Action với phản ứng liên tục | - Hiệu ứng Headphones 3D Ambience. Kết nối với các ứng dụng thú vị | - Tính năng nhịp điệu phức tạp với điệu đệm thông minh; | - Đàn có dạng tủ đứng tiết kiệm không gian",
                            FeatureId = 1,
                            ProductCode = "RP-501R-CB",
                            ProductName = "Roland RP-501R",
                            ProductPrice = 82000000m,
                            Sale = 0.3m,
                            VideoLink = "",
                            specifications = "Trọng lượng Kích thước Rộng 149cm (59\") Cao 101cm (40\") Dày 161cm (5'3\")"
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductSkuId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ProductImageId = 1,
                            ImageUrl = "Product1.jpg",
                            ProductSkuId = 1
                        },
                        new
                        {
                            ProductImageId = 2,
                            ImageUrl = "Product1.jpg",
                            ProductSkuId = 2
                        },
                        new
                        {
                            ProductImageId = 3,
                            ImageUrl = "Product1.jpg",
                            ProductSkuId = 3
                        },
                        new
                        {
                            ProductImageId = 4,
                            ImageUrl = "Product1.jpg",
                            ProductSkuId = 4
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.ProductSku", b =>
                {
                    b.Property<int>("ProductSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSkuId"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductSkuId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSkus");

                    b.HasData(
                        new
                        {
                            ProductSkuId = 1,
                            ColorId = 1,
                            ProductId = 1,
                            Sku = "C1PE-C1",
                            UnitInStock = 3,
                            UnitPrice = 12000000m
                        },
                        new
                        {
                            ProductSkuId = 2,
                            ColorId = 2,
                            ProductId = 1,
                            Sku = "C1PE-C2",
                            UnitInStock = 5,
                            UnitPrice = 12500000m
                        },
                        new
                        {
                            ProductSkuId = 3,
                            ColorId = 3,
                            ProductId = 1,
                            Sku = "C1PE-C3",
                            UnitInStock = 3,
                            UnitPrice = 12800000m
                        },
                        new
                        {
                            ProductSkuId = 4,
                            ColorId = 1,
                            ProductId = 2,
                            Sku = "CT3001",
                            UnitInStock = 3,
                            UnitPrice = 18000000m
                        },
                        new
                        {
                            ProductSkuId = 5,
                            ColorId = 2,
                            ProductId = 2,
                            Sku = "CT3002",
                            UnitInStock = 4,
                            UnitPrice = 18200000m
                        },
                        new
                        {
                            ProductSkuId = 6,
                            ColorId = 1,
                            ProductId = 3,
                            Sku = "CDP-S160BK1",
                            UnitInStock = 4,
                            UnitPrice = 8200000m
                        },
                        new
                        {
                            ProductSkuId = 7,
                            ColorId = 1,
                            ProductId = 4,
                            Sku = "RP-501R-CB1",
                            UnitInStock = 1,
                            UnitPrice = 82000000m
                        });
                });

            modelBuilder.Entity("MuInStoreAPI.Models.UserLocation", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("UserLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Category", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Comment", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.CommentImage", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Order", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.ProductSku", "ProductSku")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductSkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductSku");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Payment", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.PayStatus", "PayStatus")
                        .WithMany()
                        .HasForeignKey("PayStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayStatus");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Product", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MuInStoreAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MuInStoreAPI.Models.Feature", "Feature")
                        .WithMany("Products")
                        .HasForeignKey("FeatureId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.ProductImage", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.ProductSku", "ProductSku")
                        .WithMany("Images")
                        .HasForeignKey("ProductSkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSku");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.ProductSku", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.Color", "Color")
                        .WithMany("ProductSkus")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.Product", "Product")
                        .WithMany("ProductSkus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.UserLocation", b =>
                {
                    b.HasOne("MuInStoreAPI.Models.AppUser", "AppUser")
                        .WithMany("UserLocations")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuInStoreAPI.Models.Location", "Location")
                        .WithMany("userLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("UserLocations");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Color", b =>
                {
                    b.Navigation("ProductSkus");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Feature", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Location", b =>
                {
                    b.Navigation("userLocations");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.Product", b =>
                {
                    b.Navigation("ProductSkus");
                });

            modelBuilder.Entity("MuInStoreAPI.Models.ProductSku", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
